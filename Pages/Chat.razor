@page "/chat/{ChatId}/{Token}"
@using BlazorApp.Data
@using BlazorApp.Services
@inject NavigationManager _navigationManager

<PageTitle>Chat</PageTitle>

<h1>Chat</h1>

<button class="btn btn-primary" @onclick="NavigateToLogin">Back to home</button>

<hr/>

@if (!_isChatting)
{
    @if (CheckUserToken())
    {
        NavigateToLogin();
    }

    <button type="button" @onclick="@StartChat"><span class="oi oi-chat" aria-hidden="true"></span> Enter chat</button>

    // Error messages
    @if (_message != null)
    {
        <div class="invalid-feedback">@_message</div>
        <small id="emailHelp" class="form-text text-muted">@_message</small>
    }
}
else
{
    @if (CheckUserToken())
    {
        NavigateToLogin();
    }

    // banner to show current user
    <div class="alert alert-secondary mt-4" role="alert">
        <span class="oi oi-person mr-2" aria-hidden="true"></span>
        <span>You are connected as <b>@UserId</b></span>
        <button class="btn btn-sm btn-warning ml-md-auto" @onclick="@DisconnectAsync">Disconnect</button>
    </div>

    // display messages
    <div id="scrollbox">
        @foreach (var item in _messages)
        {
            @if (item.IsNotice)
            {
                <div class="alert alert-info">@item.Body</div>
            }
            else
            {
                <div class="@item.CSS">
                    <div class="user">@item.Username</div>
                    <div class="msg">@item.Body</div>
                </div>
            }
        }
        <hr/>
        <textarea class="input-lg" placeholder="enter your message" @bind="@_newMessage" @onkeydown="@(Enter)"></textarea>
        <button class="btn btn-default" @onclick="@(SendNewMessageAsync)">Send</button>
    </div>
}

@code {

    private void NavigateToLogin()
    {
        _navigationManager.NavigateTo("localhost:5000/login");
        //_navigationManager.NavigateTo("/login");
    }

    // id of the chat
    [Parameter]
    public string? ChatId { get; set; }

    // ID of the user who will be chatting
    [Parameter]
    public string? UserId { get; set; }

    // token
    [Parameter]
    public string? Token { get; set; }

    // name of the user who will be chatting
    public string? Username { get; set; }

    // flag to indicate chat status
    private static bool _isChatting = false;

    // on-screen message
    private string? _message;

    // new message input
    private string? _newMessage;

    // list of messages in chat
    private static List<ChatMessage> _messages = new List<ChatMessage>();

    // entity for server intercations
    private ServerInteraction _serverInteraction = new ServerInteraction("http://localhost:8000");

    private ClientInteraction _clientInteraction = new ClientInteraction("http://localhost:4000");

    public async Task StartChat()
    {
        CheckUserToken();
        
    // check username is valid
        if (string.IsNullOrWhiteSpace(UserId))
        {
            _message = "Please enter a name";
            return;
        }

        try
        {
    // Start chatting and force refresh UI.
            _isChatting = true;
            await Task.Delay(1);

    // remove old messages if any
    //_messages.Clear();

            if (ChatId != null && Username != null)
            {
                _messages = _serverInteraction.GetMessagesList(ChatId, Username).Result;
            }

            await SendMessageAsync($"(Notice) {UserId} joined chat room.");
        }
        catch (Exception e)
        {
            _message = $"ERROR: Failed to start chat client: {e.Message}";
            _isChatting = false;
        }
    }

    private async void BroadcastMessage(string name, string? message)
    {
        bool isMine = name.Equals(UserId, StringComparison.OrdinalIgnoreCase);

        _messages.Add(new ChatMessage(name, message, isMine));
        await _serverInteraction.SendMessage(ChatId, UserId, message);

    // Inform blazor the UI needs updating
        StateHasChanged();
    }

    private async Task DisconnectAsync()
    {
        if (_isChatting)
        {
            await SendMessageAsync($"[Notice] {UserId} left chat room.");

            _isChatting = false;
        }
    }

    private async Task SendNewMessageAsync()
    {
        if (_isChatting && !string.IsNullOrWhiteSpace(_newMessage))
        {
            if (UserId != null)
            {
                BroadcastMessage(UserId, _newMessage);
            }
            this._newMessage = string.Empty;
        }
    }

    private async Task SendMessageAsync(string message)
    {
        if (_isChatting && !string.IsNullOrWhiteSpace(message))
        {
            if (Username != null)
            {
                BroadcastMessage(Username, message);
            }
        }
    }

    private async void Enter(KeyboardEventArgs e)
    {
        if (e.Code is "Enter" or "NumpadEnter")
        {
            await SendNewMessageAsync();
        }
    }

    private bool CheckUserToken()
    {
        try
        {
            var userByToken = _clientInteraction.GetUserByToken(Token);
            if (false && userByToken.Result?.userId == null) //TODO remove false when testing token with client backend
            {
                return true;
            }

            UserId = userByToken.Result.userId;

            if (userByToken.Result.userType == "client")
            {
                var clientDto = _clientInteraction.GetClientByToken(Token).Result;
                if (clientDto != null) Username = clientDto.Name;
                else Username = "null";
            }
            else if (userByToken.Result.userType == "tutor")
            {
                var tutorDto = _clientInteraction.GetTutorByToken(Token).Result;
                if (tutorDto != null) Username = tutorDto.Name;
                else Username = "null";
            }

            return false;
        }
        catch (Exception e)
        {
            Console.WriteLine(e.Message);
        }

        return false;
    }

}