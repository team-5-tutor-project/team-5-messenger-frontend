@page "/chat/{ChatId}"
@using BlazorApp.Data
@inject NavigationManager _navigationManager

<PageTitle>Chat</PageTitle>

<h1>Chat</h1>

<button class="btn btn-primary" @onclick="NavigateToHome">Back to home</button>

<hr/>

@if (!_isChatting)
{
    <!--
    <p>
        Enter your name to start chatting:
    </p>

    <input type="text" maxlength="32" @bind="@Username" @onkeyup="enter => StartChat()"/>
    -->

    <button type="button" @onclick="@StartChat"><span class="oi oi-chat" aria-hidden="true"></span> Enter chat</button>

    // Error messages
    @if (_message != null)
    {
        <div class="invalid-feedback">@_message</div>
        <small id="emailHelp" class="form-text text-muted">@_message</small>
    }
}
else
{
    // banner to show current user
    <div class="alert alert-secondary mt-4" role="alert">
        <span class="oi oi-person mr-2" aria-hidden="true"></span>
        <span>You are connected as <b>@Username</b></span>
        <button class="btn btn-sm btn-warning ml-md-auto" @onclick="@DisconnectAsync">Disconnect</button>
    </div>
    
    // display messages
    <div id="scrollbox">
        @foreach (var item in _messages)
        {
            @if (item.IsNotice)
            {
                <div class="alert alert-info">@item.Body</div>
            }
            else
            {
                <div class="@item.CSS">
                    <div class="user">@item.Username</div>
                    <div class="msg">@item.Body</div>
                </div>
            }
        }
        <hr/>
        <textarea class="input-lg" placeholder="enter your message" @bind="@_newMessage" @onkeydown="@(Enter)"></textarea>
        <button class="btn btn-default" @onclick="@(SendNewMessageAsync)">Send</button>
    </div>
}

@code {

    private void NavigateToHome()
    {
        _navigationManager.NavigateTo("");
    }

    // id of the chat
    [Parameter]
    public string ChatId { get; set; }
    
    // name of the user who will be chatting
    public string? Username { get; set; } = "GTEgorss";

    // flag to indicate chat status
    private static bool _isChatting = false;

    // on-screen message
    private string? _message;

    // new message input
    private string? _newMessage;

    // list of messages in chat
    private static List<ChatMessage> _messages = new List<ChatMessage>();

    
    public async Task StartChat()
    {
        // check username is valid
        if (string.IsNullOrWhiteSpace(Username))
        {
            _message = "Please enter a name";
            return;
        }

        try
        {
            // Start chatting and force refresh UI.
            _isChatting = true;
            await Task.Delay(1);

            // remove old messages if any
            //_messages.Clear();

            await SendMessageAsync($"[Notice] {Username} joined chat room.");
        }
        catch (Exception e)
        {
            _message = $"ERROR: Failed to start chat client: {e.Message}";
            _isChatting = false;
        }
    }

    private void BroadcastMessage(string name, string? message)
    {
        bool isMine = name.Equals(Username, StringComparison.OrdinalIgnoreCase);

        _messages.Add(new ChatMessage(name, message, isMine));

        // Inform blazor the UI needs updating
        StateHasChanged();
    }

    private async Task DisconnectAsync()
    {
        if (_isChatting)
        {
            await SendMessageAsync($"[Notice] {Username} left chat room.");

            _isChatting = false;
        }
    }

    private async Task SendNewMessageAsync()
    {
        if (_isChatting && !string.IsNullOrWhiteSpace(_newMessage))
        {
            if (Username != null)
            {
                BroadcastMessage(Username, _newMessage);
            }
            this._newMessage = string.Empty;
        }
    }
    
    private async Task SendMessageAsync(string message)
    {
        if (_isChatting && !string.IsNullOrWhiteSpace(message))
        {
            if (Username != null)
            {
                BroadcastMessage(Username, message);
            }
        }
    }
    
    private async void Enter(KeyboardEventArgs e)
    {
        if (e.Code is "Enter" or "NumpadEnter")
        {
            await SendNewMessageAsync();
        }
    }
}